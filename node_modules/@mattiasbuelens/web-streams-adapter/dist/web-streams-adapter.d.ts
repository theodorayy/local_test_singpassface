interface ReadableStreamLikeConstructor {
    new <R extends ArrayBufferView = ArrayBufferView>(underlyingSource: UnderlyingByteSource, strategy?: {
        highWaterMark?: number;
        size?: undefined;
    }): ReadableStreamLike<R>;
    new <R = any>(underlyingSource?: UnderlyingSource<R>, strategy?: QueuingStrategy<R>): ReadableStreamLike<R>;
}
interface ReadableStreamLike<R = any> {
    readonly locked: boolean;
    getReader(): ReadableStreamDefaultReader<R>;
    getReader({ mode }: {
        mode: 'byob';
    }): ReadableStreamBYOBReader;
}
declare type ReadableByteStreamLike = ReadableStreamLike<ArrayBufferView>;
interface WritableStreamLikeConstructor {
    new <W = any>(underlyingSink?: UnderlyingSink<W>, strategy?: QueuingStrategy<W>): WritableStreamLike<W>;
}
interface WritableStreamLike<W = any> {
    readonly locked: boolean;
    getWriter(): WritableStreamDefaultWriter<W>;
}
interface TransformStreamLikeConstructor {
    new <I = any, O = any>(transformer?: Transformer<I, O>, writableStrategy?: QueuingStrategy<I>, readableStrategy?: QueuingStrategy<O>): TransformStreamLike<I, O>;
}
interface TransformStreamLike<I = any, O = any> {
    readonly writable: WritableStreamLike<I>;
    readonly readable: ReadableStreamLike<O>;
}

interface WrappingReadableSourceOptions {
    type?: 'bytes';
}
declare type ReadableStreamWrapper = <R>(readable: ReadableStreamLike<R>, options?: WrappingReadableSourceOptions) => ReadableStreamLike<R>;
declare type TransformStreamWrapper = <I, O>(Transform: TransformStreamLike<I, O>) => TransformStreamLike<I, O>;
declare type WritableStreamWrapper = <W>(writable: WritableStreamLike<W>) => WritableStreamLike<W>;

declare function createReadableStreamWrapper(ctor: ReadableStreamLikeConstructor): ReadableStreamWrapper;
declare function createWrappingReadableSource<R = any>(readable: ReadableStreamLike<R>, { type }?: WrappingReadableSourceOptions): UnderlyingSource<R> | UnderlyingByteSource;

declare function createWritableStreamWrapper(ctor: WritableStreamLikeConstructor): WritableStreamWrapper;
declare function createWrappingWritableSink<W = any>(writable: WritableStreamLike<W>): UnderlyingSink<W>;

declare function createTransformStreamWrapper(ctor: TransformStreamLikeConstructor): TransformStreamWrapper;
declare function createWrappingTransformer<I = any, O = any>(transform: TransformStreamLike<I, O>): Transformer<I, O>;

export { ReadableByteStreamLike, ReadableStreamLike, ReadableStreamLikeConstructor, ReadableStreamWrapper, TransformStreamLike, TransformStreamLikeConstructor, TransformStreamWrapper, WrappingReadableSourceOptions, WritableStreamLike, WritableStreamLikeConstructor, WritableStreamWrapper, createReadableStreamWrapper, createTransformStreamWrapper, createWrappingReadableSource, createWrappingTransformer, createWrappingWritableSink, createWritableStreamWrapper };
